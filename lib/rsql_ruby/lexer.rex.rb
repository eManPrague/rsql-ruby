# encoding: UTF-8
#--
# This file is automatically generated. Do not modify it.
# Generated by: oedipus_lex version 2.5.1.
# Source: lib/rsql_ruby/lexer.rex
#++

module RsqlRuby


##
# The generated lexer Parser < Racc::Parser

class Parser < Racc::Parser
  require 'strscan'

  # :stopdoc:
  BLANK                = /(\ |\t)+/
  UNRESERVED           = /[a-zA-Z0-9\-._~:]+/
  COMPARATOR           = /!=|(=([a-z]|!)*=)/
  AND_OPERATOR         = /;/
  OR_COMMA_OPERATOR    = /,/
  SINGLE_QUOTE         = /'/
  DOUBLE_QUOTE         = /"/
  SINGLE_QUOTED_STRING = /[^']+/
  DOUBLE_QUOTED_STRING = /[^"]+/
  OPENING_BRACKET      = /\(/
  CLOSING_BRACKET      = /\)/
  # :startdoc:
  # :stopdoc:
  class LexerError < StandardError ; end
  class ScanError < LexerError ; end
  # :startdoc:

  ##
  # The file name / path

  attr_accessor :filename

  ##
  # The StringScanner for this lexer.

  attr_accessor :ss

  ##
  # The current lexical state.

  attr_accessor :state

  alias :match :ss

  ##
  # The match groups for the current scan.

  def matches
    m = (1..9).map { |i| ss[i] }
    m.pop until m[-1] or m.empty?
    m
  end

  ##
  # Yields on the current action.

  def action
    yield
  end


  ##
  # The current scanner class. Must be overridden in subclasses.

  def scanner_class
    StringScanner
  end unless instance_methods(false).map(&:to_s).include?("scanner_class")

  ##
  # Parse the given string.

  def parse str
    self.ss     = scanner_class.new str
    self.state  ||= nil

    do_parse
  end

  ##
  # Read in and parse the file at +path+.

  def parse_file path
    self.filename = path
    open path do |f|
      parse f.read
    end
  end

  ##
  # The current location in the parse.

  def location
    [
      (filename || "<input>"),
    ].compact.join(":")
  end

  ##
  # Lex the next token.

  def next_token

    token = nil

    until ss.eos? or token do
      token =
        case state
        when nil then
          case
          when ss.skip(/#{BLANK}/) then
            # do nothing
          when text = ss.scan(/#{UNRESERVED}/) then
            action { [:UNRESERVED, text] }
          when text = ss.scan(/#{COMPARATOR}/) then
            action { [:COMPARATOR, text] }
          when text = ss.scan(/#{OR_COMMA_OPERATOR}/) then
            action { [:OR_COMMA_OPERATOR, text] }
          when text = ss.scan(/#{AND_OPERATOR}/) then
            action { [:AND_OPERATOR, text] }
          when text = ss.scan(/#{OPENING_BRACKET}/) then
            action { [:OPENING_BRACKET, text] }
          when text = ss.scan(/#{CLOSING_BRACKET}/) then
            action { [:CLOSING_BRACKET, text] }
          when text = ss.scan(/#{SINGLE_QUOTE}/) then
            action { self.state = :SINGLE_QUOTE; [:SINGLE_QUOTE, text] }
          when text = ss.scan(/#{DOUBLE_QUOTE}/) then
            action { self.state = :DOUBLE_QUOTE; [:DOUBLE_QUOTE, text] }
          else
            text = ss.string[ss.pos .. -1]
            raise ScanError, "can not match (#{state.inspect}) at #{location}: '#{text}'"
          end
        when :SINGLE_QUOTE then
          case
          when text = ss.scan(/#{SINGLE_QUOTED_STRING}/) then
            action { [:SINGLE_QUOTED_STRING, text] }
          when text = ss.scan(/#{SINGLE_QUOTE}/) then
            action { self.state = nil; [:SINGLE_QUOTE, text] }
          else
            text = ss.string[ss.pos .. -1]
            raise ScanError, "can not match (#{state.inspect}) at #{location}: '#{text}'"
          end
        when :DOUBLE_QUOTE then
          case
          when text = ss.scan(/#{DOUBLE_QUOTED_STRING}/) then
            action { [:DOUBLE_QUOTED_STRING, text] }
          when text = ss.scan(/#{DOUBLE_QUOTE}/) then
            action { self.state = nil; [:DOUBLE_QUOTE, text] }
          else
            text = ss.string[ss.pos .. -1]
            raise ScanError, "can not match (#{state.inspect}) at #{location}: '#{text}'"
          end
        else
          raise ScanError, "undefined state at #{location}: '#{state}'"
        end # token = case state

      next unless token # allow functions to trigger redo w/ nil
    end # while

    raise LexerError, "bad lexical result at #{location}: #{token.inspect}" unless
      token.nil? || (Array === token && token.size >= 2)

    # auto-switch state
    self.state = token.last if token && token.first == :state

    token
  end # def next_token
end # class

  end
